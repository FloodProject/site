<?php
/**
* @file
* A description of what your module does.
*/

require_once "Flood.php";
require_once "helpers.php";

/**
 * Implements hook_node_info().
 *
 * We use hook_node_info() to define our node content type.
 */
function FloodProject_node_info()
{
    //Make content type an organic group
	og_create_field(OG_GROUP_FIELD, 'node', Flood::PACKAGE_NODE_TYPE);
	
	$og_field = og_fields_info(OG_AUDIENCE_FIELD);
    $og_field['field']['target_type'] = "node";
    $og_field['field']['settings']['handler_settings']['target_bundles'] = array( Flood::PACKAGE_NODE_TYPE );
	
    og_create_field(OG_AUDIENCE_FIELD, 'node', "blog", $og_field);
	og_create_field(OG_AUDIENCE_FIELD, 'node', "forum", $og_field);
	
    return array(
        Flood::PACKAGE_NODE_TYPE => array(
            'name' => t('Package'),
            // 'base' tells Drupal the base string for hook functions.
            'base' => 'node_content',
            'description' => t('This node represents a flood package'),
            'title_label' => t('Flood Package'),
            // We'll set the 'locked' attribute to TRUE, so users won't be
            // able to change the machine name of our content type.
            'locked' => TRUE,
        ),
    );
}

function active_module($node = '')
{
    static $active_module;
    if(!empty($node))
    {
        $og = og_context('node', $node);
        $active_module = $node;
        $active_module->gid = $og['gid'];
    }

    return $active_module;
}

function FloodProject_get_url_nid($url)
{
    $matches = array();
    if(preg_match("#^node/(?P<nid>[0-9]+)#", $url, $matches))
        return $matches['nid'];
}

function FloodProject_init()
{
    $nid = FloodProject_get_url_nid(current_path());
    if(empty($nid))
        return;

    active_module(node_load($nid));
}

function FloodProject_preprocess(&$variables, $hook)
{
    if (active_module())
    {
        $variables['module_menu'] = FloodProject_get_active_module_tree();
        $variables['module_title'] = active_module()->title;
        $variables['module_install_link'] = "modstir://megamodule";
    }
}

function FloodProject_get_active_module_tree()
{
    $module_href = "node/" . active_module()->nid;
    $tree = menu_tree_all_data(OG_MENU_SINGLE_MENU_NAME);
    foreach ($tree as $menu)
    {
        if(empty($menu['link']['href']))
            continue;

        if(strcmp($module_href,$menu['link']['href']) == 0)
            return menu_tree_output($menu['below']);
    }

    return null;
}

function FloodProject_menu()
{
    $items = array();

    $items['browse'] = create_menu_item('Browse', 'browse', 'main-menu');
    $items['news'] = create_menu_item('News', 'news', 'main-menu');
    $items['download'] = create_menu_item('Download', 'download', 'main-menu');
    $items['docs'] = create_menu_item('Docs', 'docs', 'main-menu');

    $items['node/%/docs'] = create_menu_item('', 'docs');
    $items['node/%/forum'] = create_menu_item('', 'forum');
    $items['node/%/news'] = create_menu_item('', 'news');

    return $items;
}

function FloodProject_load_view($view)
{
    ob_start();
    include 'views/'.$view.'.php';
    return ob_get_clean();
}

function create_menu_item($title, $view, $menu = '')
{
    static $weigth = 0;

    return array(
        'title' => $title,
        'page callback' => 'FloodProject_load_view',
        'page arguments' => array($view),
        'weight' => $weigth++,
        'menu_name' => $menu,
        'access callback' => TRUE,
    );
}

function FloodProject_node_update($node)
{
    update_package_menu($node);
}

function FloodProject_menu_link_insert($item)
{
    if($item['menu_name'] != OG_MENU_SINGLE_MENU_NAME || $item['plid'] != 0)
        return;

    $nid = FloodProject_get_url_nid($item['link_path']);
    if(!empty($nid))
        update_package_menu(node_load($nid));
}

function update_package_menu($node)
{
    if($node->type != Flood::PACKAGE_NODE_TYPE)
        return;

    $plid = get_link(OG_MENU_SINGLE_MENU_NAME, 0, $node->title);

    $has_blog = FloodContentType::has_content_type($node, FloodContentType::Blog);

    $blog_link =  array(
        'link_title' => 'News',
        'link_path' => 'node/' . $node->nid . '/news',
        'weight' => 1,
    );
    update_package_link($blog_link, $plid, $has_blog);

    $docs_link =  array(
        'link_title' => 'Docs',
        'link_path' => 'node/' . $node->nid . '/docs',
        'weight' => 2,
    );
    update_package_link($docs_link, $plid);
}

function update_package_link($link, $plid, $should_have_link = true)
{
    $link['plid'] = $plid;
    $link['mlid'] = get_link(OG_MENU_SINGLE_MENU_NAME, $link['plid'], $link['link_title']);

    if($should_have_link)
    {
        $link0 = array(
            'menu_name' => OG_MENU_SINGLE_MENU_NAME,
        );
        $link = array_merge($link0, $link);
        menu_link_save($link);
    }
    else
    {
        menu_link_delete($link['mlid']);
    }
}

function get_link($menu_name, $plid ,$title)
{
    $links = menu_load_links($menu_name);
    foreach ($links as $link) {
        if($link['plid'] == $plid && $link['link_title'] == $title)
            return $link['mlid'];
    }
}

function FloodProject_form_alter(&$form, $form_state, $form_id) {
    //Sets node default organic group audience
    if (isset($_REQUEST['modid'])) {
        $form['og_group_ref']['und'][0]['default']['#default_value'][] = $_REQUEST['modid'];
    }
    return $form;
}




/*
 * Web Services
 */

function FloodProject_xmlrpc()
{
    $methods[] = array(
        'FloodProject.get_package_download_link',
        '_FloodProject_get_package_download_link',
        array('string' /*return link*/, 'string' /*package id*/, 'string' /*package version*/),
        t('Return the package download link.'),
    );

    $methods[] = array(
        'FloodProject.get_package_dependencies',
        '_FloodProject_get_package_dependencies',
        array('array' /*return dependencies*/, 'string' /*package id*/, 'string' /*package version*/),
        t('Return the package dependencies.'),
    );

    return $methods;
}

function _FloodProject_get_package_download_link($packageId, $packageVersion)
{

}

function _FloodProject_get_package_dependencies($packageId, $packageVersion)
{

}